[resilient]

# Basic service connection
host=resilient
port=443
email=api@example.com
password=password
org=Culture

# Actions Module connection
stomp_port=65001

# Directory containing the other components to load
componentsdir=components

# If your Resilient server uses a self-signed TLS certificate, or some
# other certificate that is not automatically trusted by your machine,
# you need to explicitly tell the Python scripts that it should be trusted.
# To explicitly trust a site, download its certificate to a file, e.g:
#    mkdir -p ~/resilient/
#    openssl s_client -connect resilient.example.com:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM > ~/resilient/cert.cer
# then specify the file (remove the '#' from the line below):
# cafile=~/resilient/cert.cer

# -----------------------------------------------------------------------------
# The 'shell_runner' action component
# -----------------------------------------------------------------------------
[shell]

# Subscribe on a message destination named 'shell'
queue=shell

# NOTE: change the paths as appropriate!

# Curly braces use the JINJA2 template syntax.
# The '...|sh' escapes content in '...' for safer use in a Bash commandline
# The '...|ps' escapes content in '...' for safer use in a PowerShell commandline

# 'command': defines the default commandline used for actions.
# Here the default action is to run a script, where the name of the script is {{action_name}}
# (the name of the Resilient custom action, lowercase, with non-characters replaced by underscores).
# This passes the artifact value as a command-line parameter (assuming that the action
# was on an artifact).

command=bash /home/resilient/actions/scripts/{{action_name}}.sh "{{artifact.value|sh}}"

# NOTE: for PowerShell scripts on Windows, replace the default command with something like the below.
#command=powershell "C:\\resilient\\actions\\scripts\\{{action_name}}.ps1" "{{artifact.value|ps}}"

# 'result_disposition': defines how the result (stdout of the shell script) is handled.
# Here the default disposition is to attach the output to the incident as a new text file,
# where the filename is derived from the action name and the action timestamp

result_disposition=new_attachment,filename={{action_name}}_{{properties._message_headers.timestamp|iso8601}}.txt


# You can specify a command, and a disposition, for specific actions
# (based on the action name).  For example below, a custom action 'nslookup' just
# runs the nslookup command directly, passing the artifact value as a parameter.

nslookup=nslookup "{{artifact.value|sh}}"

dig=dig "{{artifact.value|sh}}"

nslookup_result_disposition=new_attachment,filename={{action_name}}_{{artifact.value|sh}}.txt


# Three snort examples are provided.
# For these, the script output is added to the incident as a new note.

add_snort_rule_result_disposition=new_note_text
add_to_snort_blacklist_result_disposition=new_note_text
add_to_snort_whitelist_result_disposition=new_note_text


